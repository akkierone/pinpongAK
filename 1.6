<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ピンポンゲーム</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Audiowide&display=swap');

        /* スターウォーズ風背景アニメーション */
        body {
            background-color: black;
            color: #00FFDD;
            font-family: 'Audiowide', sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            overflow: hidden;
            position: relative;
        }

        /* 背景の星が流れるアニメーション */
        body::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: radial-gradient(circle, #ffffff 2px, transparent 2px),
                        radial-gradient(circle, #ffffff 1.5px, transparent 1.5px);
            background-size: 2px 2px, 1.5px 1.5px;
            background-position: 0 0, 1px 1px;
            z-index: -1;
            animation: starAnimation 20s linear infinite;
        }

        @keyframes starAnimation {
            from {
                transform: translateY(0);
            }
            to {
                transform: translateY(-100%);
            }
        }

        h1 {
            font-size: 36px;
            color: #FFDD57; /* ライトセーバー風の黄色 */
            text-shadow: 0 0 15px #FFDD57, 0 0 30px #FFD700;
            margin: 0;
            padding-bottom: 20px;
        }

        #scoreDisplay {
            font-size: 22px;
            margin-bottom: 10px;
            color: #00FFDD;
            text-shadow: 0 0 10px #00FFDD, 0 0 20px #00FFFF;
        }

        canvas {
            background-color: rgba(0, 0, 0, 0.7);
            border: 2px solid #0095DD;
            border-radius: 10px;
            width: 100%;
            max-width: 600px;
            height: auto;
            box-shadow: 0 0 30px #0095DD;
        }

        button {
            background-color: #0095DD;
            color: white;
            border: none;
            border-radius: 5px;
            padding: 12px 24px;
            font-size: 18px;
            cursor: pointer;
            margin-top: 20px;
            font-family: 'Audiowide', sans-serif;
            text-shadow: 0 0 10px #0095DD, 0 0 20px #00FFFF;
            box-shadow: 0 0 20px #0095DD, 0 0 30px #00FFFF;
            transition: transform 0.2s ease-in-out;
        }

        button:hover {
            transform: scale(1.1);
            background-color: #007bbd;
            box-shadow: 0 0 30px #007bbd, 0 0 50px #00FFDD;
        }

        #startButton {
            display: block;
        }

        #restartButton {
            display: none;
        }
    </style>
</head>
<body>

<h1>絶対に落とすな！</h1>

<div id="scoreDisplay">スコア: 0</div>

<canvas id="gameCanvas"></canvas>

<div id="startButton">
    <button onclick="startGame()">スタート</button> <!-- スタートボタン追加 -->
</div>

<div id="restartButton">
    <button onclick="restartGame()">再度始める</button>
</div>

<script>
    const canvas = document.getElementById('gameCanvas');
    const ctx = canvas.getContext('2d');
    const scoreDisplay = document.getElementById('scoreDisplay');
    const startButton = document.getElementById('startButton');
    const restartButton = document.getElementById('restartButton');

    let paddleHeight = 10;
    let paddleWidth = 75;
    let paddleX = (canvas.width - paddleWidth) / 2;
    let ballRadius = 10;
    let x = canvas.width / 2;
    let y = canvas.height - 30;
    let dx = 5;
    let dy = -5;
    let touchX = null;
    let isGameOver = false;
    let score = 0;
    let speedIncreaseFactor = 0.2;
    let isGameStarted = false;

    // キャンバスのリサイズ
    function resizeCanvas() {
        canvas.width = Math.min(window.innerWidth * 0.9, 600);
        canvas.height = canvas.width * 0.6;
        paddleWidth = canvas.width / 6;
        paddleX = (canvas.width - paddleWidth) / 2;
        x = canvas.width / 2;
        y = canvas.height - 30;
    }

    window.addEventListener('resize', resizeCanvas);
    resizeCanvas();

    function updateScore() {
        score += 1;
        scoreDisplay.textContent = `スコア: ${score}`;
        dx += dx > 0 ? speedIncreaseFactor : -speedIncreaseFactor;
        dy += dy > 0 ? speedIncreaseFactor : -speedIncreaseFactor;
    }

    function drawBall() {
        ctx.beginPath();
        ctx.arc(x, y, ballRadius, 0, Math.PI * 2);
        ctx.fillStyle = "#FFD700";
        ctx.fill();
        ctx.closePath();
    }

    function drawPaddle() {
        ctx.beginPath();
        ctx.rect(paddleX, canvas.height - paddleHeight, paddleWidth, paddleHeight);
        ctx.fillStyle = "#00FFDD";
        ctx.fill();
        ctx.closePath();
    }

    function draw() {
        if (!isGameOver && isGameStarted) {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            drawBall();
            drawPaddle();

            if (x + dx > canvas.width - ballRadius || x + dx < ballRadius) {
                dx = -dx;
            }
            if (y + dy < ballRadius) {
                dy = -dy;
            } else if (y + dy > canvas.height - ballRadius) {
                if (x > paddleX && x < paddleX + paddleWidth) {
                    dy = -dy;
                    updateScore();
                } else {
                    gameOver();
                }
            }

            x += dx;
            y += dy;

            if (touchX !== null) {
                paddleX = touchX - paddleWidth / 2;
            }

            requestAnimationFrame(draw);
        }
    }

    function gameOver() {
        isGameOver = true;
        restartButton.style.display = 'block';
        isGameStarted = false;
    }

    function startGame() {
        isGameOver = false;
        isGameStarted = true;
        startButton.style.display = 'none'; // スタートボタン非表示
        restartButton.style.display = 'none';
        score = 0;
        scoreDisplay.textContent = `スコア: ${score}`;
        resetGame();
        draw();
    }

    function restartGame() {
        isGameOver = false;
        isGameStarted = true;
        restartButton.style.display = 'none';
        score = 0;
        scoreDisplay.textContent = `スコア: ${score}`;
        dx = 5;
        dy = -5;
        resetGame();
        draw();
    }

    function resetGame() {
        x = canvas.width / 2;
        y = canvas.height - 30;
        paddleX = (canvas.width - paddleWidth) / 2;
    }

    canvas.addEventListener('touchstart', handleTouchMove, false);
    canvas.addEventListener('touchmove', handleTouchMove, false);

    function handleTouchMove(e) {
        e.preventDefault();
        const rect = canvas.getBoundingClientRect();
        touchX = e.touches[0].clientX - rect.left;
    }

    draw();
</script>

</body>
</html>
